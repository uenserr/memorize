@page "/{username}/{deckId}/selection"
@inject DeckService deckService

<PageTitle>Подбор</PageTitle>

<style>
    .question {
        height: 25vh;
        border-width: 2px;
        font-size: 28px;
    }

    .answer-pick {
        border-width: 2px;
        height: 15vh;
        border-bottom-color: gray;
        border-bottom-width: 5px;
        font-size: 28px;
        cursor: pointer;
    }

    .answer-pick:hover {
        border-bottom-color: rgb(99, 99, 241);
    }

    .move-button {
        border: none;
        cursor: pointer;
        appearance: none;
        background-color: inherit;
        position: absolute;
        right: 10px;
        visibility: hidden;
    }

    .info {
        width: 100px;
        height: 50px;
        position: absolute;
        top: 85px;
        border: 2px solid lightgray;
        border-radius: 10px;
        display: flex;
        justify-content: center;
        align-content: center;
    }
</style>

<div class="container h-100 d-flex align-items-center justify-content-center">
    <div class="info">
        <p style="margin-top: 10px; font-size: 20px;">@CardsConveyor.Count</p>
    </div>
    <div class="row w-100 h-75">
        <div class="col-12" align="center">
            <div class="card question">
                <div class="card-body d-flex align-items-center justify-content-center">
                    <p class="card-text">
                        @CardsConveyor[0].FrontSide
                    </p>
                    <img class="frontside" src='data:image;base64,@(Convert.ToBase64String(CardsConveyor[0].Image))' style="width:15%; height:auto; aspect-ratio: 1 / 1; border: 1px solid gray; border-radius: 10px; position: absolute; right: 20px; top: 20px" />
                </div>
            </div>
        </div>
        <div class="w-100"></div>
        <div class="col-6" align="center">
            <div @onclick="@(e => PickAnswer(0))" class="card answer-pick" style="@_answerButtonStyles[0]">
                <div class="card-body d-flex align-items-center justify-content-center">
                    <p class="card-text">
                        @_answers[0].BackSide
                    </p>
                    <button class="move-button" style="@_nextButtonStyles[0]">
                        <img src="/Icons/card-forward-50.png" />
                    </button>
                </div>
            </div>
        </div>
        <div class="col-6" align="center">
            <div @onclick="@(e => PickAnswer(1))" class="card answer-pick" style="@_answerButtonStyles[1]">
                <div class="card-body d-flex align-items-center justify-content-center">
                    <p class="card-text">
                        @_answers[1].BackSide
                    </p>
                    <button class="move-button" style="@_nextButtonStyles[1]">
                        <img src="/Icons/card-forward-50.png" />
                    </button>
                </div>
            </div>
        </div>
        <div class="col-6" align="center">
            <div @onclick="@(e => PickAnswer(2))" class="card answer-pick" style="@_answerButtonStyles[2]">
                <div class="card-body d-flex align-items-center justify-content-center">
                    <p class="card-text">
                        @_answers[2].BackSide
                    </p>
                    <button class="move-button" style="@_nextButtonStyles[2]">
                        <img src="/Icons/card-forward-50.png" />
                    </button>
                </div>
            </div>
        </div>
        <div class="col-6" align="center">
            <div @onclick="@(e => PickAnswer(3))" class="card answer-pick" style="@_answerButtonStyles[3]">
                <div class="card-body d-flex align-items-center justify-content-center">
                    <p class="card-text">
                        @_answers[3].BackSide
                    </p>
                    <button class="move-button" style="@_nextButtonStyles[3]">
                        <img src="/Icons/card-forward-50.png" />
                    </button>
                </div>
            </div>
        </div>
    </div>

</div>


@code {

    [Parameter]
    public string? DeckID { get; set; }

    [Parameter]
    public string? Username { get; set; }

    [Inject]
    private NavigationManager? _navigationManager { get; set; }

    private List<Card> _cards = new List<Card> { new Card() };
    private List<Card>? _answers = new List<Card> { new Card(), new Card(), new Card(), new Card() };

    public List<Card> CardsConveyor { get; private set; } = new List<Card>();


    private int _currentPosition;
    public int CurrentPosition
    {
        get { return _currentPosition; }
        set
        {
            if (value >= 0 && value < _cards.Count)
            {
                _currentPosition = value;
            }
        }
    }
    private bool _choisePicked;
    public bool IsAnswerCorrect { get; private set; }

    private string[] _nextButtonStyles = new string[4];
    private string[] _answerButtonStyles = new string[4];

    public void SetAnswers()
    {
        Random random = new Random();
        Card correctAnswer = CardsConveyor.First();
        _answers.Clear();
        _answers.Add(correctAnswer);
        var availableIndexes = Enumerable.Range(0, _cards.Count).ToList();
        availableIndexes.Remove(_cards.IndexOf(CardsConveyor[0])); //
        for (int i = 0; i < 3; i++)
        {
            int rndNumber = random.Next(availableIndexes.Count);
            _answers.Add(_cards[availableIndexes[rndNumber]]);
            availableIndexes.RemoveAt(rndNumber);
        }
        var shuffled = _answers.OrderBy(_ => random.Next()).ToList();
        _answers = shuffled;
    }

    private void PickAnswer(int id)
    {
        if (!_choisePicked)
        {
            int answerIndex = _answers.IndexOf(CardsConveyor[0]);
            _nextButtonStyles[id] = "visibility:visible;";
            if (CardsConveyor.First().ID == _answers[id].ID)
            {                
                IsAnswerCorrect = true;
                _answerButtonStyles[id] = "border-bottom-color: rgb(81, 214, 88);";
            }
            else
            {
                IsAnswerCorrect = false;
                _answerButtonStyles[id] = "border-bottom-color: rgb(214, 64, 64);";
                _answerButtonStyles[answerIndex] = "border-bottom-color: rgb(81, 214, 88);";
            }
            for (int i = 0; i < 4; i++)
            {
                if (i == id) continue;
                _answerButtonStyles[i] += "pointer-events: none;";
            }
            _choisePicked = true;
        }
        else
        {
            if (!IsAnswerCorrect)
            {
                CardsConveyor.Add(CardsConveyor[0]);
            }
            CardsConveyor.RemoveAt(0);
            if (CardsConveyor.Count == 0)
            {
                _navigationManager.NavigateTo($"{Username}/{DeckID}");
            }
            _choisePicked = false;
            Array.Fill(_nextButtonStyles, "");
            Array.Fill(_answerButtonStyles, "");
            SetAnswers();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetDeckCards();
        SetAnswers();
    }

    private async Task GetDeckCards()
    {
        var deckID = Convert.ToInt32(DeckID);
        var apiDeck = await deckService.GetCards(deckID);
        if (apiDeck != null)
        {
            _cards = apiDeck.ToList();
        }
        foreach (var card in _cards)
        {
            CardsConveyor.Add(card);
        }
    }
}