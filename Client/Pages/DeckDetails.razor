@page "/{username}/{deckId}"
@using System.Drawing;

@inject DeckService deckService
@inject AuthService authService
@inject ReportService reportService


<PageTitle>@deck.Name</PageTitle>

<style>
    .alert-fixed {
        position: fixed;
        bottom: 1px;
        left: 50%;
        right: 50%;
        width: 80%;
        z-index: 9999;
        opacity: 0.95;
        transform: translate(-50%, -50%);
        visibility: visible;
    }

    .btn-label {
            position: relative;
            left: -12px;
            display: inline-block;
            padding: 6px 12px;
            background: rgba(0,0,0,0.15);
            border-radius: 3px 0 0 3px;
        }

        .btn-labeled {
            padding-top: 0;
            padding-bottom: 0;
        }

        .btn {
            margin-bottom: 10px;
        }

        .card {
            border: 2px solid lightgray;
        }

        .mode-pick {
            border-bottom-color: gray;
            border-bottom-width: 5px;
        }

        .mode-pick:hover {
            border-bottom-color: rgb(99, 99, 241);
        }

        .file-button {
            width: 100px;
        }

        .visibile {
            visibility: hidden;
        }

        .disabled {
            pointer-events: none;
            opacity: 0.6;
        }

        input[type="file"] {
            display: none;
        }

    </style>

<div class="alert alert-warning alert-dismissible fade show alert-fixed" role="alert"
    style="visibility: @_selectionAlertVisibility">
    <strong>Недостаточно карт для режима 'подбор'!</strong> В колоде необходимо иметь минимум 4 карты для использования
    этого режима.
    <button type="button" @onclick="CloseSelectionAlertClick" class="btn-close" aria-label="Close" />
</div>

<div class="alert alert-warning alert-dismissible fade show alert-fixed" role="alert"
    style="visibility: @_intervalsAlertVisibility">
    <strong>На текущий момент карты для повторения отсутствуют!</strong> Повторите попытку позже.
    <button type="button" @onclick="CloseIntervalsAlertClick" class="btn-close" aria-label="Close" />
</div>

    <div class="modal fade" id="sendReportModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Отправить жалобу</h5>
                    <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-12">
                                <div class="form-outline mb-4">
                                    <label class="form-label" for="form2Example1">Сообщение</label>
                                    <InputTextArea class="form-control" @bind-Value="@Report.Message" />
                                </div>
                            </div>
                        </div>
                    </div>


                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Отмена</button>
                    <button @onclick="SendReport" type="button" class="btn btn-primary" data-dismiss="modal">Отправить</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="deckSettingsModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Настройки колоды</h5>
                    <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="container-fluid">
                        <div class="row">
                            <b class="mb-2" style="font-size:20px">Коэф. для интервального повторения</b>
                            <div>
                                <span class="badge bg-danger">@deck.DontRememberFactor</span>
                                "Снова"
                            </div>
                            <input class="w-100 p-0 bg-danger" type="range" @bind="deck.DontRememberFactor" min="0" max="5" step="0.1" />
                        <div>
                            <span class="badge bg-warning">@deck.HardRememberFactor</span>
                            "Плохо"
                        </div>
                        <input class="w-100 p-0" type="range" @bind="deck.HardRememberFactor" min="0" max="5" step="0.1" />
                        <div>
                            <span class="badge bg-success">@deck.GoodRememberFactor</span>
                            "Хорошо"
                        </div>
                        <input class="w-100 p-0" type="range" @bind="deck.GoodRememberFactor" min="0" max="5" step="0.1" />
                        <div>
                            <span class="badge bg-primary">@deck.EasyRememberFactor</span>
                            "Отлично"
                        </div>
                        <input class="w-100 p-0" type="range" @bind="deck.EasyRememberFactor" min="0" max="5" step="0.1" />
   

                        <b class="my-2" style="font-size:20px">Приватность</b>

                        <div class="form-check form-switch">
                            <input class="form-check-input" @bind="deck.IsPublic" type="checkbox" id="flexSwitchCheckDefault">
                            <label class="form-check-label" for="flexSwitchCheckDefault">Колода доступна для других пользователей</label>
                        </div>

                        </div>
                    </div>


                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Отмена</button>
                <button @onclick="UpdateDeck" type="button" class="btn btn-primary" data-dismiss="modal">Применить</button>
                </div>
            </div>
        </div>
    </div>

    <div class="container mt-5">
        <div class="d-flex flex-row w-100 justify-content-between">
            <h1 class="mb-4">@deck.Name </h1>
            <h2 class="mb-4 align-self-end">Карты: @deck.Cards.Count</h2>
        </div>
   


    <div class="row ">
        <div class="col-lg-6 mb-2">
            <div class="card">
                <div class="card-body p-2">
                    <div class="container h-100 d-flex align-items-center justify-content-center">

                        <div class="row">
                        <div class="col-6 g-2">
                                <div class="card mode-pick" @onclick="@(e => RedirectToDeck("flashcards"))" style="cursor: pointer; height: 100%;">
                                    <div class="card-body">
                                        <i class="bi bi-card-heading h3 float-end"></i>
                                        <h4 class="card-title">Карточки</h4>
                                        <p class="card-text">Просмотр списка карточек</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-6 g-2">
                                <div class="card mode-pick" @onclick="@(e => RedirectToDeck("selection"))" style="cursor: pointer; height: 100%;">
                                    <div class="card-body">
                                        <i class="bi bi-dpad h3 float-end"></i>
                                        <h4 class="card-title">Подбор</h4>
                                        <p class="card-text">Повторение путем подбора правильного ответа</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-6 g-2">
                                <div class="card mode-pick" @onclick="@(e => RedirectToDeck("writing"))" style="cursor: pointer; height: 100%;">
                                    <div class="card-body">
                                        <i class="bi bi-pencil h3 float-end"></i>
                                        <h4 class="card-title">Правописание</h4>
                                        <p class="card-text">
                                            Закрепление правописания
                                        </p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-6 g-2">
                                <div class="@(IsDeckOwnToUser ? "" : "disabled") card mode-pick" @onclick="@(e => RedirectToDeck("intervals"))" style="cursor: pointer; height: 100%;">
                                    <div class="card-body">
                                        <i class="bi bi-clock-history h3 float-end"></i>
                                        @if (CardsLearnCount > 0 && IsDeckOwnToUser)
                                        {
                                            <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" style="display: block">
                                                @CardsLearnCount
                                            </span>
                                        }
                                        <h4 class="card-title">Интервальное повторение</h4>
                                        <p class="card-text">
                                            Метод интервального повторения
                                        </p>
                                    </div>
                                </div>
                        </div>
                                                                
                    </div>
                    </div>
                </div>
            </div>
        </div>

       

        <div class="col-lg-6 mb-2">
            <div class="card" style="height: 100%">
                <div class="card-body d-flex flex-column">
                    <div class="form-outline mb-4">
                        <label class="form-label" for="form2Example1"><b>Название колоды</b></label>
                        <InputText class="form-control" style="@(IsDeckOwnToUser ? "" : "pointer-events: none; opacity: 0.8")" @bind-Value="@deck.Name" @onblur="@(e => UpdateDeck())" />
                    </div>
                    <div class="form-outline mb-4">
                        <label class="form-label" for="form2Example1"><b>Описание колоды</b></label>
                        <InputTextArea class="form-control" style="@(IsDeckOwnToUser ? "" : "pointer-events: none; opacity: 0.8")" @bind-Value="@deck.Description"
                                       @onblur="@(e => UpdateDeck())" />
                    </div>

                    <div class="mt-auto container-fluid">
                        <div class="row">
                            <div class="col-6 p-0">
                                <div class="float-start d-flex flex-row" style="width: 100%;">
                                    @if (deck.User.Image == null)
                                    {
                                        <img src='/defaultAvatar.jpg' style="width:30px; height:30px; border: 1px solid gray; border-radius:15px" />
                                    }
                                    else
                                    {
                                        <img src='data:image;base64,@(Convert.ToBase64String(deck.User.Image))' style="width:30px; height:30px; border: 1px solid gray; border-radius:15px" />
                                    }
                                    <span style="font-size: 20px; margin-left: 4px">@deck.User.Login</span>
                                </div>
                            </div>
                            <div class="col-6 p-0">
                                @if (CurrentUser != null)
                                {
                                    @if (IsDeckOwnToUser)
                                    {
                                        <button type="button" class="btn btn-labeled btn-secondary h-100 float-end align-self-end mt-auto" data-toggle="modal" data-target="#deckSettingsModal">
                                            <i class="bi bi-gear"></i>
                                            Настройки
                                        </button>
                                    }
                                    else
                                    {

                                        <button @onclick="CopyDeck" type="button" class="btn btn-labeled btn-primary h-100 float-end align-self-end mt-auto mx-1 ">
                                            <i class="bi bi-copy"></i>
                                            Скопировать
                                        </button>
                                        <button type="button" class="btn btn-labeled btn-danger h-100 float-end align-self-end mt-auto mx-1" data-toggle="modal" data-target="#sendReportModal">
                                            <i class="bi bi-flag"></i>
                                        </button>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    @foreach (var deckCard in cards)
    {
        <div class="card-deck mb-2">
            <div class="card">
                <div class="card-body">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-10">
                                @if (IsDeckOwnToUser)
                                {
                                    <InputFile id="file" OnChange="LoadFile" >
                                        <i class="bi bi-file-earmark-plus-fill"></i>
                                    </InputFile>
                                    <label @onclick="@(e => SetCardForFileAdding(deckCard))" for="file" class="btn btn-sm btn-secondary float-end">
                                        <i class="bi bi-file-earmark-image"></i>
                                        Загрузить
                                    </label>
                                }
                                
                                <div class="form-outline mb-4">
                                    <label class="form-label" for="form2Example1"><b>Вопрос</b></label>
                                    <InputText class="form-control" style="@(IsDeckOwnToUser ? "" : "pointer-events: none; opacity: 0.8")" @bind-Value="@deckCard.FrontSide"
                                               @onblur="@(e => UpdateCard(deckCard, false))" />
                                </div>
                                <div class="form-outline mb-4">

                                    <label class="form-label" for="form2Example1"><b>Ответ</b></label>
                                    <InputTextArea class="form-control" style="@(IsDeckOwnToUser ? "" : "pointer-events: none; opacity: 0.8")" @bind-Value="@deckCard.BackSide"
                                               @onblur="@(e => UpdateCard(deckCard, false))" />
                                </div>
                                
                            </div>
                            <div class="col-2">
                                
                                <button @onclick="@(e => DeleteCard(deckCard))" type="button" style="margin-right: -12px" class="btn btn-labeled btn-danger float-end @(IsDeckOwnToUser ? "" : "visually-hidden")">
                                    <i class="bi bi-trash"></i>
                                </button>
                                @if (deckCard.Image != null)
                                {
                                    <img src='data:image;base64,@(Convert.ToBase64String(deckCard.Image))' style="width:84%; height: auto; aspect-ratio: 1 / 1; border: 1px solid gray; border-radius: 10px" />
                                }

                                
                            </div>
                        </div>
                    </div>
                    
                </div>
            </div>
        </div>
    }
    <div class="row mt-4 justify-content-center">
        <button type="button" @onclick="AddCard" class="btn btn-primary w-50 @(IsDeckOwnToUser ? "" : "visually-hidden")">Добавить</button>
    </div>

</div>

@code {
    protected Deck? deck = new Deck();

    protected List<Card> cards = new List<Card>();

    [Parameter]

    public string? DeckID { get; set; }

    [Parameter]

    public string? Username { get; set; }

    [Inject]

    private NavigationManager? _navigationManager { get; set; }

    public User? CurrentUser { get; set; }

    public Report Report { get; set; } = new Report();

    public int CardsLearnCount { get; set; }

    private byte[]? _inputFile;
    private Card? _cardForFileAdding;

    public bool IsDeckOwnToUser { get; private set; }

    private void SetCardForFileAdding(Card card)
    {
        _cardForFileAdding = card;
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        try
        {
            using (var reader = new StreamReader(e.File.OpenReadStream()))
            {
                var format = "image/jpeg";
                var resizedImageFile = await e.File.RequestImageFileAsync(format, 500, 500);
                var buffer = new byte[resizedImageFile.Size];
                await resizedImageFile.OpenReadStream().ReadAsync(buffer);
                _inputFile = buffer;
            }
            if (_cardForFileAdding != null)
            {
                await UpdateCard(_cardForFileAdding, true);
            }       
        }
        catch (Exception ex)
        {
            System.Console.WriteLine(ex.Message);
        }
    }


    private string _selectionAlertVisibility = "hidden";
    private string _intervalsAlertVisibility = "hidden";

    private void RedirectToDeck(string modeLink)
    {
        if (cards.Count == 0)
        {
            return;
        }
        if (modeLink == "selection" && cards.Count < 4)
        {
            _selectionAlertVisibility = "visible";
            _intervalsAlertVisibility = "hidden";
            return;
        }
        if (modeLink == "intervals" && CardsLearnCount == 0)
        {
            _intervalsAlertVisibility = "visible";
            _selectionAlertVisibility = "hidden";
            return;
        }
        _navigationManager.NavigateTo($"{Username}/{deck.ID}/{modeLink}");
    }



    private void CloseSelectionAlertClick()
    {
        _selectionAlertVisibility = "hidden";
    }

    private void CloseIntervalsAlertClick()
    {
        _intervalsAlertVisibility = "hidden";
    }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(DeckID))
        {

        }
        else
        {
            CurrentUser = await authService.GetCurrentUser();
            await GetDeckCards();
            CalculateCardsLearnCount();
            
            if (CurrentUser == null) 
                IsDeckOwnToUser = false;
            else 
                IsDeckOwnToUser = CurrentUser.Login == Username ? true : false;
        }
    }

    private void CalculateCardsLearnCount()
    {
        CardsLearnCount = 0;
        foreach (var card in cards)
        {
            if (card.NextAppear <= DateTime.Today)
            {
                CardsLearnCount++;
            }
        }
    }

    private async Task SendReport()
    {
        Report.DeckID = deck.ID;
        var result = reportService.AddReport(Report);
    }

    private async Task GetDeckCards()
    {
        var deckID = Convert.ToInt32(DeckID);
        deck = await deckService.GetDeck(deckID);
        var apiDeck = await deckService.GetCards(deckID);
        if (apiDeck != null)
        {
            cards = apiDeck.ToList();
        }
    }

    private async Task CopyDeck()
    {
        var copiedDeck = new Deck
        {
            Name = deck.Name,
            Description = deck.Description,
            UserID = CurrentUser.ID
        };
        copiedDeck = await deckService.AddDeck(copiedDeck);

        foreach (var card in deck.Cards)
        {
            var copiedCard = new Card
            {
                FrontSide = card.FrontSide,
                BackSide = card.BackSide,
                Image = card.Image,
                DeckID = copiedDeck.ID
            };
            deckService.AddCard(copiedCard);
        }
    }

    protected async Task UpdateDeck()
    {
        var result = await deckService.UpdateDeck(deck);
    }



    protected async Task UpdateCard(Card card, bool loadImageState)
    {
        if (loadImageState) card.Image = _inputFile;
        var result = await deckService.UpdateCard(card);
    }



    protected async Task AddCard()
    {
        var card = new Card { DeckID = deck.ID };
        var result = await deckService.AddCard(card);
        await GetDeckCards();
        CalculateCardsLearnCount();
    }



    protected async Task DeleteCard(Card card)
    {
        var result = await deckService.DeleteCard(card.ID);
        await GetDeckCards();
        CalculateCardsLearnCount();
    }
}